# This is the configuration file for Ghostty.
#
# This template file has been automatically created at the following
# path since Ghostty couldn't find any existing config files on your system:
#
#   /home/rthetapi/.config/ghostty/config
#
# The template does not set any default options, since Ghostty ships
# with sensible defaults for all options. Users should only need to set
# options that they want to change from the default.
#
# Run `ghostty +show-config --default --docs` to view a list of
# all available config options and their default values.
#
# Additionally, each config option is also explained in detail
# on Ghostty's website, at https://ghostty.org/docs/config.

# Config syntax crash course
# ==========================
# # The config file consists of simple key-value pairs,
# # separated by equals signs.
# font-family = Iosevka
# window-padding-x = 2
#
# # Spacing around the equals sign does not matter.
# # All of these are identical:
# key=value
# key= value
# key =value
# key = value
#
# # Any line beginning with a # is a comment. It's not possible to put
# # a comment after a config option, since it would be interpreted as a
# # part of the value. For example, this will have a value of "#123abc":
# background = #123abc
#
# # Empty values are used to reset config keys to default.
# key =
#
# # Some config options have unique syntaxes for their value,
# # which is explained in the docs for that config option.
# # Just for example:
# resize-overlay-duration = 4s 200ms

# For example, 13.5pt @ 2px/pt = 27px
font-size = 12

# Apply a font feature. To enable multiple font features you can repeat
# this multiple times or use a comma-separated list of feature settings.
#
# The syntax for feature settings is as follows, where `feat` is a feature:
#
#   * Enable features with e.g. `feat`, `+feat`, `feat on`, `feat=1`.
#   * Disabled features with e.g. `-feat`, `feat off`, `feat=0`.
#   * Set a feature value with e.g. `feat=2`, `feat = 3`, `feat 4`.
#   * Feature names may be wrapped in quotes, meaning this config should be
#     syntactically compatible with the `font-feature-settings` CSS property.
#
# The syntax is fairly loose, but invalid settings will be silently ignored.
#
# The font feature will apply to all fonts rendered by Ghostty. A future
# enhancement will allow targeting specific faces.
#
# To disable programming ligatures, use `-calt` since this is the typical
# feature name for programming ligatures. To look into what font features
# your font has and what they do, use a font inspection tool such as
# [fontdrop.info](https://fontdrop.info).
#
# To generally disable most ligatures, use `-calt, -liga, -dlig`.
font-feature = halt

# Force one or a range of Unicode codepoints to map to a specific named font.
# This is useful if you want to support special symbols or if you want to use
# specific glyphs that render better for your specific font.
#
# The syntax is `codepoint=fontname` where `codepoint` is either a single
# codepoint or a range. Codepoints must be specified as full Unicode
# hex values, such as `U+ABCD`. Codepoints ranges are specified as
# `U+ABCD-U+DEFG`. You can specify multiple ranges for the same font separated
# by commas, such as `U+ABCD-U+DEFG,U+1234-U+5678=fontname`. The font name is
# the same value as you would use for `font-family`.
#
# This configuration can be repeated multiple times to specify multiple
# codepoint mappings.
#
# Changing this configuration at runtime will only affect new terminals,
# i.e. new windows, tabs, etc.
font-codepoint-map = U+3300-U+4DBF=ChillHuoFangKai_F_Regular
font-codepoint-map = U+FF00-U+FFEF=SourceHanSerifSC-VF
font-codepoint-map = U+20000-U+2FA1F=TW-Kai-Ext-B-98_1

# Distance in pixels or percentage adjustment from the bottom of the cell to the text baseline.
# Increase to move baseline UP, decrease to move baseline DOWN.
# See the notes about adjustments in `adjust-cell-width`.
adjust-font-baseline = -2

# Distance in pixels or percentage adjustment from the top of the cell to the top of the underline.
# Increase to move underline DOWN, decrease to move underline UP.
# See the notes about adjustments in `adjust-cell-width`.
adjust-underline-position = -1

# A theme to use. This can be a built-in theme name, a custom theme
# name, or an absolute path to a custom theme file. Ghostty also supports
# specifying a different theme to use for light and dark mode. Each
# option is documented below.
#
# If the theme is an absolute pathname, Ghostty will attempt to load that
# file as a theme. If that file does not exist or is inaccessible, an error
# will be logged and no other directories will be searched.
#
# If the theme is not an absolute pathname, two different directories will be
# searched for a file name that matches the theme. This is case sensitive on
# systems with case-sensitive filesystems. It is an error for a theme name to
# include path separators unless it is an absolute pathname.
#
# The first directory is the `themes` subdirectory of your Ghostty
# configuration directory. This is `$XDG_CONFIG_DIR/ghostty/themes` or
# `~/.config/ghostty/themes`.
#
# The second directory is the `themes` subdirectory of the Ghostty resources
# directory. Ghostty ships with a multitude of themes that will be installed
# into this directory. On macOS, this list is in the
# `Ghostty.app/Contents/Resources/ghostty/themes` directory. On Linux, this
# list is in the `share/ghostty/themes` directory (wherever you installed the
# Ghostty "share" directory.
#
# To see a list of available themes, run `ghostty +list-themes`.
#
# A theme file is simply another Ghostty configuration file. They share
# the same syntax and same configuration options. A theme can set any valid
# configuration option so please do not use a theme file from an untrusted
# source. The built-in themes are audited to only set safe configuration
# options.
#
# Some options cannot be set within theme files. The reason these are not
# supported should be self-evident. A theme file cannot set `theme` or
# `config-file`. At the time of writing this, Ghostty will not show any
# warnings or errors if you set these options in a theme file but they will
# be silently ignored.
#
# Any additional colors specified via background, foreground, palette, etc.
# will override the colors specified in the theme.
#
# To specify a different theme for light and dark mode, use the following
# syntax: `light:theme-name,dark:theme-name`. For example:
# `light:rose-pine-dawn,dark:rose-pine`. Whitespace around all values are
# trimmed and order of light and dark does not matter. Both light and dark
# must be specified in this form. In this form, the theme used will be
# based on the current desktop environment theme.
#
# There are some known bugs with light/dark mode theming. These will
# be fixed in a future update:
#
#   - macOS: titlebar tabs style is not updated when switching themes.
#
theme = catppuccin-mocha

# The color of the cursor. If this is not set, a default will be chosen.
# Specified as either hex (`#RRGGBB` or `RRGGBB`) or a named X11 color.
cursor-color = FAA533

# Swap the foreground and background colors of the cell under the cursor. This
# option overrides the `cursor-color` and `cursor-text` options.
cursor-invert-fg-bg = false

# The opacity level (opposite of transparency) of the cursor. A value of 1
# is fully opaque and a value of 0 is fully transparent. A value less than 0
# or greater than 1 will be clamped to the nearest valid value. Note that a
# sufficiently small value such as 0.3 may be effectively invisible and may
# make it difficult to find the cursor.
cursor-opacity = 0.6

# The color of the text under the cursor. If this is not set, a default will
# be chosen.
# Specified as either hex (`#RRGGBB` or `RRGGBB`) or a named X11 color.
cursor-text = DC143C

# Hide the mouse immediately when typing. The mouse becomes visible again
# when the mouse is used (button, movement, etc.). Platform-specific behavior
# may dictate other scenarios where the mouse is shown. For example on macOS,
# the mouse is shown again when a new window, tab, or split is created.
mouse-hide-while-typing = true

# Multiplier for scrolling distance with the mouse wheel. Any value less
# than 0.01 or greater than 10,000 will be clamped to the nearest valid
# value.
#
# A value of "1" (default) scrolls the default amount. A value of "2" scrolls
# double the default amount. A value of "0.5" scrolls half the default amount.
# Et cetera.
mouse-scroll-multiplier = 10

# The opacity level (opposite of transparency) of the background. A value of
# 1 is fully opaque and a value of 0 is fully transparent. A value less than 0
# or greater than 1 will be clamped to the nearest valid value.
#
# On macOS, background opacity is disabled when the terminal enters native
# fullscreen. This is because the background becomes gray and it can cause
# widgets to show through which isn't generally desirable.
#
# On macOS, changing this configuration requires restarting Ghostty completely.
background-opacity = 0.7

# Whether to blur the background when `background-opacity` is less than 1.
#
# Valid values are:
#
#   * a nonnegative integer specifying the *blur intensity*
#   * `false`, equivalent to a blur intensity of 0
#   * `true`, equivalent to the default blur intensity of 20, which is
#     reasonable for a good looking blur. Higher blur intensities may
#     cause strange rendering and performance issues.
#
# Supported on macOS and on some Linux desktop environments, including:
#
#   * KDE Plasma (Wayland and X11)
#
# Warning: the exact blur intensity is _ignored_ under KDE Plasma, and setting
# this setting to either `true` or any positive blur intensity value would
# achieve the same effect. The reason is that KWin, the window compositor
# powering Plasma, only has one global blur setting and does not allow
# applications to specify individual blur settings.
#
# To configure KWin's global blur setting, open System Settings and go to
# "Apps & Windows" > "Window Management" > "Desktop Effects" and select the
# "Blur" plugin. If disabled, enable it by ticking the checkbox to the left.
# Then click on the "Configure" button and there will be two sliders that
# allow you to set background blur and noise intensities for all apps,
# including Ghostty.
#
# All other Linux desktop environments are as of now unsupported. Users may
# need to set environment-specific settings and/or install third-party plugins
# in order to support background blur, as there isn't a unified interface for
# doing so.
background-blur = true

# The opacity level (opposite of transparency) of an unfocused split.
# Unfocused splits by default are slightly faded out to make it easier to see
# which split is focused. To disable this feature, set this value to 1.
#
# A value of 1 is fully opaque and a value of 0 is fully transparent. Because
# "0" is not useful (it makes the window look very weird), the minimum value
# is 0.15. This value still looks weird but you can at least see what's going
# on. A value outside of the range 0.15 to 1 will be clamped to the nearest
# valid value.
unfocused-split-opacity = 0.9

# The size of the scrollback buffer in bytes. This also includes the active
# screen. No matter what this is set to, enough memory will always be
# allocated for the visible screen and anything leftover is the limit for
# the scrollback.
#
# When this limit is reached, the oldest lines are removed from the
# scrollback.
#
# Scrollback currently exists completely in memory. This means that the
# larger this value, the larger potential memory usage. Scrollback is
# allocated lazily up to this limit, so if you set this to a very large
# value, it will not immediately consume a lot of memory.
#
# This size is per terminal surface, not for the entire application.
#
# It is not currently possible to set an unlimited scrollback buffer.
# This is a future planned feature.
#
# This can be changed at runtime but will only affect new terminal surfaces.
scrollback-limit = 10000000

# Match a regular expression against the terminal text and associate clicking
# it with an action. This can be used to match URLs, file paths, etc. Actions
# can be opening using the system opener (e.g. `open` or `xdg-open`) or
# executing any arbitrary binding action.
#
# Links that are configured earlier take precedence over links that are
# configured later.
#
# A default link that matches a URL and opens it in the system opener always
# exists. This can be disabled using `link-url`.
#
# TODO: This can't currently be set!

# Enable URL matching. URLs are matched on hover with control (Linux) or
# super (macOS) pressed and open using the default system application for
# the linked URL.
#
# The URL matcher is always lowest priority of any configured links (see
# `link`). If you want to customize URL matching, use `link` and disable this.
link-url = true

# Whether to start the window in a maximized state. This setting applies
# to new windows and does not apply to tabs, splits, etc. However, this setting
# will apply to all new windows, not just the first one.
maximize = false

# Start new windows in fullscreen. This setting applies to new windows and
# does not apply to tabs, splits, etc. However, this setting will apply to all
# new windows, not just the first one.
#
# On macOS, this setting does not work if window-decoration is set to
# "false", because native fullscreen on macOS requires window decorations
# to be set.
fullscreen = false

# The title Ghostty will use for the window. This will force the title of the
# window to be this title at all times and Ghostty will ignore any set title
# escape sequences programs (such as Neovim) may send.
#
# If you want a blank title, set this to one or more spaces by quoting
# the value. For example, `title = " "`. This effectively hides the title.
# This is necessary because setting a blank value resets the title to the
# default value of the running program.
#
# This configuration can be reloaded at runtime. If it is set, the title
# will update for all windows. If it is unset, the next title change escape
# sequence will be honored but previous changes will not retroactively
# be set. This latter case may require you to restart programs such as Neovim
# to get the new title.
title =

# Key bindings. The format is `trigger=action`. Duplicate triggers will
# overwrite previously set values. The list of actions is available in
# the documentation or using the `ghostty +list-actions` command.
#
# Trigger: `+`-separated list of keys and modifiers. Example: `ctrl+a`,
# `ctrl+shift+b`, `up`.
#
# Valid keys are currently only listed in the
# [Ghostty source code](https://github.com/ghostty-org/ghostty/blob/d6e76858164d52cff460fedc61ddf2e560912d71/src/input/key.zig#L255).
# This is a documentation limitation and we will improve this in the future.
# A common gotcha is that numeric keys are written as words: e.g. `one`,
# `two`, `three`, etc. and not `1`, `2`, `3`. This will also be improved in
# the future.
#
# Valid modifiers are `shift`, `ctrl` (alias: `control`), `alt` (alias: `opt`,
# `option`), and `super` (alias: `cmd`, `command`). You may use the modifier
# or the alias. When debugging keybinds, the non-aliased modifier will always
# be used in output.
#
# Note: The fn or "globe" key on keyboards are not supported as a
# modifier. This is a limitation of the operating systems and GUI toolkits
# that Ghostty uses.
#
# Some additional notes for triggers:
#
#   * modifiers cannot repeat, `ctrl+ctrl+a` is invalid.
#
#   * modifiers and keys can be in any order, `shift+a+ctrl` is *weird*,
#     but valid.
#
#   * only a single key input is allowed, `ctrl+a+b` is invalid.
#
#   * the key input can be prefixed with `physical:` to specify a
#     physical key mapping rather than a logical one. A physical key
#     mapping responds to the hardware keycode and not the keycode
#     translated by any system keyboard layouts. Example: "ctrl+physical:a"
#
# You may also specify multiple triggers separated by `>` to require a
# sequence of triggers to activate the action. For example,
# `ctrl+a>n=new_window` will only trigger the `new_window` action if the
# user presses `ctrl+a` followed separately by `n`. In other software, this
# is sometimes called a leader key, a key chord, a key table, etc. There
# is no hardcoded limit on the number of parts in a sequence.
#
# Warning: If you define a sequence as a CLI argument to `ghostty`,
# you probably have to quote the keybind since `>` is a special character
# in most shells. Example: ghostty --keybind='ctrl+a>n=new_window'
#
# A trigger sequence has some special handling:
#
#   * Ghostty will wait an indefinite amount of time for the next key in
#     the sequence. There is no way to specify a timeout. The only way to
#     force the output of a prefix key is to assign another keybind to
#     specifically output that key (e.g. `ctrl+a>ctrl+a=text:foo`) or
#     press an unbound key which will send both keys to the program.
#
#   * If a prefix in a sequence is previously bound, the sequence will
#     override the previous binding. For example, if `ctrl+a` is bound to
#     `new_window` and `ctrl+a>n` is bound to `new_tab`, pressing `ctrl+a`
#     will do nothing.
#
#   * Adding to the above, if a previously bound sequence prefix is
#     used in a new, non-sequence binding, the entire previously bound
#     sequence will be unbound. For example, if you bind `ctrl+a>n` and
#     `ctrl+a>t`, and then bind `ctrl+a` directly, both `ctrl+a>n` and
#     `ctrl+a>t` will become unbound.
#
#   * Trigger sequences are not allowed for `global:` or `all:`-prefixed
#     triggers. This is a limitation we could remove in the future.
#
# Action is the action to take when the trigger is satisfied. It takes the
# format `action` or `action:param`. The latter form is only valid if the
# action requires a parameter.
#
#   * `ignore` - Do nothing, ignore the key input. This can be used to
#     black hole certain inputs to have no effect.
#
#   * `unbind` - Remove the binding. This makes it so the previous action
#     is removed, and the key will be sent through to the child command
#     if it is printable. Unbind will remove any matching trigger,
#     including `physical:`-prefixed triggers without specifying the
#     prefix.
#
#   * `csi:text` - Send a CSI sequence. e.g. `csi:A` sends "cursor up".
#
#   * `esc:text` - Send an escape sequence. e.g. `esc:d` deletes to the
#     end of the word to the right.
#
#   * `text:text` - Send a string. Uses Zig string literal syntax.
#     e.g. `text:\x15` sends Ctrl-U.
#
#   * All other actions can be found in the documentation or by using the
#     `ghostty +list-actions` command.
#
# Some notes for the action:
#
#   * The parameter is taken as-is after the `:`. Double quotes or
#     other mechanisms are included and NOT parsed. If you want to
#     send a string value that includes spaces, wrap the entire
#     trigger/action in double quotes. Example: `--keybind="up=csi:A B"`
#
# There are some additional special values that can be specified for
# keybind:
#
#   * `keybind=clear` will clear all set keybindings. Warning: this
#     removes ALL keybindings up to this point, including the default
#     keybindings.
#
# The keybind trigger can be prefixed with some special values to change
# the behavior of the keybind. These are:
#
#   * `all:` - Make the keybind apply to all terminal surfaces. By default,
#     keybinds only apply to the focused terminal surface. If this is true,
#     then the keybind will be sent to all terminal surfaces. This only
#     applies to actions that are surface-specific. For actions that
#     are already global (e.g. `quit`), this prefix has no effect.
#
#   * `global:` - Make the keybind global. By default, keybinds only work
#     within Ghostty and under the right conditions (application focused,
#     sometimes terminal focused, etc.). If you want a keybind to work
#     globally across your system (e.g. even when Ghostty is not focused),
#     specify this prefix. This prefix implies `all:`. Note: this does not
#     work in all environments; see the additional notes below for more
#     information.
#
#   * `unconsumed:` - Do not consume the input. By default, a keybind
#     will consume the input, meaning that the associated encoding (if
#     any) will not be sent to the running program in the terminal. If
#     you wish to send the encoded value to the program, specify the
#     `unconsumed:` prefix before the entire keybind. For example:
#     `unconsumed:ctrl+a=reload_config`. `global:` and `all:`-prefixed
#     keybinds will always consume the input regardless of this setting.
#     Since they are not associated with a specific terminal surface,
#     they're never encoded.
#
#   * `performable:` - Only consume the input if the action is able to be
#     performed. For example, the `copy_to_clipboard` action will only
#     consume the input if there is a selection to copy. If there is no
#     selection, Ghostty behaves as if the keybind was not set. This has
#     no effect with `global:` or `all:`-prefixed keybinds. For key
#     sequences, this will reset the sequence if the action is not
#     performable (acting identically to not having a keybind set at
#     all).
#
#     Performable keybinds will not appear as menu shortcuts in the
#     application menu. This is because the menu shortcuts force the
#     action to be performed regardless of the state of the terminal.
#     Performable keybinds will still work, they just won't appear as
#     a shortcut label in the menu.
#
# Keybind triggers are not unique per prefix combination. For example,
# `ctrl+a` and `global:ctrl+a` are not two separate keybinds. The keybind
# set later will overwrite the keybind set earlier. In this case, the
# `global:` keybind will be used.
#
# Multiple prefixes can be specified. For example,
# `global:unconsumed:ctrl+a=reload_config` will make the keybind global
# and not consume the input to reload the config.
#
# Note: `global:` is only supported on macOS. On macOS,
# this feature requires accessibility permissions to be granted to Ghostty.
# When a `global:` keybind is specified and Ghostty is launched or reloaded,
# Ghostty will attempt to request these permissions. If the permissions are
# not granted, the keybind will not work. On macOS, you can find these
# permissions in System Preferences -> Privacy & Security -> Accessibility.
keybind = clear
keybind = shift+insert=paste_from_selection
keybind = ctrl+page_down=next_tab
keybind = ctrl+shift+v=paste_from_clipboard
keybind = ctrl+alt+up=goto_split:up
keybind = ctrl+shift+a=select_all
keybind = super+ctrl+shift+plus=equalize_splits
keybind = shift+up=adjust_selection:up
keybind = alt+five=goto_tab:5
keybind = super+ctrl+right_bracket=goto_split:next
keybind = ctrl+equal=increase_font_size:1
keybind = ctrl+shift+o=new_split:right
keybind = ctrl+shift+c=copy_to_clipboard
keybind = ctrl+shift+q=quit
keybind = ctrl+shift+n=new_window
keybind = ctrl+shift+page_down=jump_to_prompt:1
keybind = ctrl+shift+comma=reload_config
keybind = ctrl+minus=decrease_font_size:1
keybind = shift+left=adjust_selection:left
keybind = super+ctrl+shift+up=resize_split:up,10
keybind = alt+eight=goto_tab:8
keybind = shift+page_up=scroll_page_up
keybind = ctrl+shift+left=previous_tab
keybind = ctrl+zero=reset_font_size
keybind = alt+three=goto_tab:3
keybind = f11=toggle_fullscreen
keybind = ctrl+page_up=previous_tab
keybind = shift+right=adjust_selection:right
keybind = ctrl+tab=next_tab
keybind = ctrl+alt+left=goto_split:left
keybind = shift+page_down=scroll_page_down
keybind = ctrl+shift+right=next_tab
keybind = ctrl+shift+page_up=jump_to_prompt:-1
keybind = alt+nine=last_tab
keybind = ctrl+shift+t=new_tab
keybind = shift+down=adjust_selection:down
keybind = super+ctrl+shift+left=resize_split:left,10
keybind = ctrl+shift+tab=previous_tab
keybind = alt+two=goto_tab:2
keybind = ctrl+alt+down=goto_split:down
keybind = super+ctrl+shift+down=resize_split:down,10
keybind = super+ctrl+shift+right=resize_split:right,10
keybind = ctrl+plus=increase_font_size:1
keybind = alt+four=goto_tab:4
keybind = ctrl+insert=copy_to_clipboard
keybind = ctrl+shift+e=new_split:down
keybind = ctrl+alt+right=goto_split:right
keybind = alt+one=goto_tab:1
keybind = shift+home=scroll_to_top
keybind = super+ctrl+left_bracket=goto_split:previous
keybind = ctrl+shift+i=inspector:toggle
keybind = alt+six=goto_tab:6
keybind = alt+seven=goto_tab:7

# Horizontal window padding. This applies padding between the terminal cells
# and the left and right window borders. The value is in points, meaning that
# it will be scaled appropriately for screen DPI.
#
# If this value is set too large, the screen will render nothing, because the
# grid will be completely squished by the padding. It is up to you as the user
# to pick a reasonable value. If you pick an unreasonable value, a warning
# will appear in the logs.
#
# Changing this configuration at runtime will only affect new terminals, i.e.
# new windows, tabs, etc.
#
# To set a different left and right padding, specify two numerical values
# separated by a comma. For example, `window-padding-x = 2,4` will set the
# left padding to 2 and the right padding to 4. If you want to set both
# paddings to the same value, you can use a single value. For example,
# `window-padding-x = 2` will set both paddings to 2.
window-padding-x = 2

# Vertical window padding. This applies padding between the terminal cells and
# the top and bottom window borders. The value is in points, meaning that it
# will be scaled appropriately for screen DPI.
#
# If this value is set too large, the screen will render nothing, because the
# grid will be completely squished by the padding. It is up to you as the user
# to pick a reasonable value. If you pick an unreasonable value, a warning
# will appear in the logs.
#
# Changing this configuration at runtime will only affect new terminals,
# i.e. new windows, tabs, etc.
#
# To set a different top and bottom padding, specify two numerical values
# separated by a comma. For example, `window-padding-y = 2,4` will set the
# top padding to 2 and the bottom padding to 4. If you want to set both
# paddings to the same value, you can use a single value. For example,
# `window-padding-y = 2` will set both paddings to 2.
window-padding-y = 2,0

# Synchronize rendering with the screen refresh rate. If true, this will
# minimize tearing and align redraws with the screen but may cause input
# latency. If false, this will maximize redraw frequency but may cause tearing,
# and under heavy load may use more CPU and power.
#
# This defaults to true because out-of-sync rendering on macOS can
# cause kernel panics (macOS 14.4+) and performance issues for external
# displays over some hardware such as DisplayLink. If you want to minimize
# input latency, set this to false with the known aforementioned risks.
#
# Changing this value at runtime will only affect new terminals.
#
# This setting is only supported currently on macOS.
window-vsync = true

# If true, new windows and tabs will inherit the working directory of the
# previously focused window. If no window was previously focused, the default
# working directory will be used (the `working-directory` option).
window-inherit-working-directory = true

# If true, new windows and tabs will inherit the font size of the previously
# focused window. If no window was previously focused, the default font size
# will be used. If this is false, the default font size specified in the
# configuration `font-size` will be used.
window-inherit-font-size = true

# The theme to use for the windows. Valid values:
#
#   * `auto` - Determine the theme based on the configured terminal
#      background color. This has no effect if the "theme" configuration
#      has separate light and dark themes. In that case, the behavior
#      of "auto" is equivalent to "system".
#   * `system` - Use the system theme.
#   * `light` - Use the light theme regardless of system theme.
#   * `dark` - Use the dark theme regardless of system theme.
#   * `ghostty` - Use the background and foreground colors specified in the
#     Ghostty configuration. This is only supported on Linux builds with
#     Adwaita and `gtk-adwaita` enabled.
#
# On macOS, if `macos-titlebar-style` is "tabs", the window theme will be
# automatically set based on the luminosity of the terminal background color.
# This only applies to terminal windows. This setting will still apply to
# non-terminal windows within Ghostty.
#
# This is currently only supported on macOS and Linux.
window-theme = ghostty

# Whether to allow programs running in the terminal to read/write to the
# system clipboard (OSC 52, for googling). The default is to allow clipboard
# reading after prompting the user and allow writing unconditionally.
#
# Valid values are:
#
#   * `ask`
#   * `allow`
#   * `deny`
#
clipboard-read = ask

clipboard-write = allow
# Trims trailing whitespace on data that is copied to the clipboard. This does
# not affect data sent to the clipboard via `clipboard-write`.
clipboard-trim-trailing-spaces = true

# Require confirmation before pasting text that appears unsafe. This helps
# prevent a "copy/paste attack" where a user may accidentally execute unsafe
# commands by pasting text with newlines.
clipboard-paste-protection = true

# If true, bracketed pastes will be considered safe. By default, bracketed
# pastes are considered safe. "Bracketed" pastes are pastes while the running
# program has bracketed paste mode enabled (a setting set by the running
# program, not the terminal emulator).
clipboard-paste-bracketed-safe = true

# The total amount of bytes that can be used for image data (e.g. the Kitty
# image protocol) per terminal screen. The maximum value is 4,294,967,295
# (4GiB). The default is 320MB. If this is set to zero, then all image
# protocols will be disabled.
#
# This value is separate for primary and alternate screens so the effective
# limit per surface is double.
image-storage-limit = 320000000

# Whether to automatically copy selected text to the clipboard. `true`
# will prefer to copy to the selection clipboard, otherwise it will copy to
# the system clipboard.
#
# The value `clipboard` will always copy text to the selection clipboard
# as well as the system clipboard.
#
# Middle-click paste will always use the selection clipboard. Middle-click
# paste is always enabled even if this is `false`.
#
# The default value is true on Linux and macOS.
copy-on-select = true

# Whether to enable shell integration auto-injection or not. Shell integration
# greatly enhances the terminal experience by enabling a number of features:
#
#   * Working directory reporting so new tabs, splits inherit the
#     previous terminal's working directory.
#
#   * Prompt marking that enables the "jump_to_prompt" keybinding.
#
#   * If you're sitting at a prompt, closing a terminal will not ask
#     for confirmation.
#
#   * Resizing the window with a complex prompt usually paints much
#     better.
#
# Allowable values are:
#
#   * `none` - Do not do any automatic injection. You can still manually
#     configure your shell to enable the integration.
#
#   * `detect` - Detect the shell based on the filename.
#
#   * `bash`, `elvish`, `fish`, `zsh` - Use this specific shell injection scheme.
#
# The default value is `detect`.
shell-integration = bash

# Shell integration features to enable. These require our shell integration
# to be loaded, either automatically via shell-integration or manually.
#
# The format of this is a list of features to enable separated by commas. If
# you prefix a feature with `no-` then it is disabled. If you omit a feature,
# its default value is used, so you must explicitly disable features you don't
# want. You can also use `true` or `false` to turn all features on or off.
#
# Available features:
#
#   * `cursor` - Set the cursor to a blinking bar at the prompt.
#
#   * `sudo` - Set sudo wrapper to preserve terminfo.
#
#   * `title` - Set the window title via shell integration.
#
# Example: `cursor`, `no-cursor`, `sudo`, `no-sudo`, `title`, `no-title`
shell-integration-features = cursor,sudo,title

# Sets the reporting format for OSC sequences that request color information.
# Ghostty currently supports OSC 10 (foreground), OSC 11 (background), and
# OSC 4 (256 color palette) queries, and by default the reported values
# are scaled-up RGB values, where each component are 16 bits. This is how
# most terminals report these values. However, some legacy applications may
# require 8-bit, unscaled, components. We also support turning off reporting
# altogether. The components are lowercase hex values.
#
# Allowable values are:
#
#   * `none` - OSC 4/10/11 queries receive no reply
#
#   * `8-bit` - Color components are return unscaled, e.g. `rr/gg/bb`
#
#   * `16-bit` - Color components are returned scaled, e.g. `rrrr/gggg/bbbb`
#
# The default value is `16-bit`.
osc-color-report-format = 16-bit

# Control the in-app notifications that Ghostty shows.
#
# On Linux (GTK) with Adwaita, in-app notifications show up as toasts. Toasts
# appear overlaid on top of the terminal window. They are used to show
# information that is not critical but may be important.
#
# Possible notifications are:
#
#   - `clipboard-copy` (default: true) - Show a notification when text is copied
#     to the clipboard.
#
# To specify a notification to enable, specify the name of the notification.
# To specify a notification to disable, prefix the name with `no-`. For
# example, to disable `clipboard-copy`, set this configuration to
# `no-clipboard-copy`. To enable it, set this configuration to `clipboard-copy`.
#
# Multiple notifications can be enabled or disabled by separating them
# with a comma.
#
# A value of "false" will disable all notifications. A value of "true" will
# enable all notifications.
#
# This configuration only applies to GTK with Adwaita enabled.
app-notifications = clipboard-copy

# Put every surface (tab, split, window) into a dedicated Linux cgroup.
#
# This makes it so that resource management can be done on a per-surface
# granularity. For example, if a shell program is using too much memory,
# only that shell will be killed by the oom monitor instead of the entire
# Ghostty process. Similarly, if a shell program is using too much CPU,
# only that surface will be CPU-throttled.
#
# This will cause startup times to be slower (a hundred milliseconds or so),
# so the default value is "single-instance." In single-instance mode, only
# one instance of Ghostty is running (see gtk-single-instance) so the startup
# time is a one-time cost. Additionally, single instance Ghostty is much
# more likely to have many windows, tabs, etc. so cgroup isolation is a
# big benefit.
#
# This feature requires systemd. If systemd is unavailable, cgroup
# initialization will fail. By default, this will not prevent Ghostty
# from working (see linux-cgroup-hard-fail).
#
# Valid values are:
#
#   * `never` - Never use cgroups.
#   * `always` - Always use cgroups.
#   * `single-instance` - Enable cgroups only for Ghostty instances launched
#     as single-instance applications (see gtk-single-instance).
#
linux-cgroup = single-instance

# If `true`, the Ghostty GTK application will run in single-instance mode:
# each new `ghostty` process launched will result in a new window if there is
# already a running process.
#
# If `false`, each new ghostty process will launch a separate application.
#
# The default value is `desktop` which will default to `true` if Ghostty
# detects that it was launched from the `.desktop` file such as an app
# launcher (like Gnome Shell)  or by D-Bus activation. If Ghostty is launched
# from the command line, it will default to `false`.
#
# Note that debug builds of Ghostty have a separate single-instance ID
# so you can test single instance without conflicting with release builds.
gtk-single-instance = true

# When enabled, the full GTK titlebar is displayed instead of your window
# manager's simple titlebar. The behavior of this option will vary with your
# window manager.
#
# This option does nothing when `window-decoration` is false or when running
# under macOS.
#
# Changing this value at runtime and reloading the configuration will only
# affect new windows.
gtk-titlebar = false

# If `true` (default), then the Ghostty GTK tabs will be "wide." Wide tabs
# are the new typical Gnome style where tabs fill their available space.
# If you set this to `false` then tabs will only take up space they need,
# which is the old style.
gtk-wide-tabs = false

# This will be used to set the `TERM` environment variable.
# HACK: We set this with an `xterm` prefix because vim uses that to enable key
# protocols (specifically this will enable `modifyOtherKeys`), among other
# features. An option exists in vim to modify this: `:set
# keyprotocol=ghostty:kitty`, however a bug in the implementation prevents it
# from working properly. https://github.com/vim/vim/pull/13211 fixes this.
term = xterm-ghostty
